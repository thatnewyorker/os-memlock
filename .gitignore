os-memlock/.gitignore#L1-200
# Gitignore for a Rust project (Cargo)
# See https://github.com/github/gitignore/blob/main/Rust.gitignore for reference

# Build artifacts
/target/
**/target/

# If using rustup override or local toolchain files (usually committed, so commented)
# /rust-toolchain
# /rust-toolchain.toml

# Generated by cargo
**/*.rlib
**/*.rmeta

# Compiled binary outputs (optional - sometimes you want to track one)
*.exe
*.dll
*.so
*.dylib
*.a

# Debug / profiling / coverage
*.profraw
*.profdata
*.gcda
*.gcno
*.gcov
*.lcov
coverage/
grcov-report/

# WASM / wasm-pack
pkg/
*.wasm
*.wat

# C/C++ build artifacts (if your project includes native code)
*.o
*.obj
*.lo
*.la
*.out

# Editor directories and files
.idea/
.vscode/
*.sublime-workspace
*.sublime-project
*.code-workspace

# Vim / Emacs swap files
*.swp
*.swo
*~
.#*

# macOS
.DS_Store

# Windows
Thumbs.db

# Logs
*.log

# Temporary files
tmp/
temp/
*.tmp

# Node / frontend (for docs/examples that might use JS)
node_modules/
npm-debug.log*
yarn-error.log
pnpm-debug.log

# Test and CI artifacts
.cargo-test
.nextest/
.nextest.toml
.nextest-run/
# nextest caches are typically under target/

# Cargo credentials and local config
.cargo/credentials
.cargo/config.toml.local
.cargo/config.local

# Ignore build scripts' generated files (if you generate code into src/)
# Adjust if you intentionally check generated sources into VCS
# /src/generated/

# Backup files
*.bak
*.orig

# JetBrains Rider / CLion
*.iml
.idea/

# Misc
.env
.env.*.local
.env.local

# Allow people to keep local overrides by adding them to .git/info/exclude
# or a personal global gitignore (see `git config --global core.excludesfile`)

# End of file
